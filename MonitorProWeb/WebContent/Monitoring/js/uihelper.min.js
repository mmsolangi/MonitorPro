var currentLOB; var LOBDataModel, LOBDetailDataModel; var cols, colsDetail; var LOBDetailData = new Array; var sort = new Array; var gridDetail; var UnAuthorizedCode = "Err2031"; colsDetail = [{ title: "Detail ID", width: 100, dataIndx: "outcomeDTLID", editable: true }, { title: "Application Code", width: 100, dataIndx: "applicationCode" }, { title: "FLow Name", width: 150, dataIndx: "slStepName" }, { title: "Log Level", width: 100, dataIndx: "errorType" }, { title: "Error Code", width: 100, dataIndx: "sourceSystemErrorCode" }, { title: "Error Desc", width: 150, dataIndx: "sourceSystemErrorDesc" }, { title: "Input Message", width: 290, dataIndx: "inputPayload", editable: true, render: function (e) { var t = e.rowData, n = e.dataIndx, r = t[n]; return "<textarea readonly cols='40' rows='5'>" + r + "</textarea>" } }, { title: "Output Message", width: 290, dataIndx: "outputPayload", editable: true, render: function (e) { var t = e.rowData, n = e.dataIndx, r = t[n]; return "<textarea readonly cols='40' rows='5'>" + r + "</textarea>" } }]; $(document).ready(function () { UIHelper.SetWelcome(); $("#logout").click(function () { UIHelper.Logout() }); LOBDataModel = { location: "remote", sorting: "remote", paging: "remote", dataType: "JSON", editable: false, method: "GET", curPage: 1, rPP: 5, sortIndx: 0, sortDir: "down", topVisible: false, rPPOptions: [5, 10, 20, 30, 40, 50, 100], getUrl: function () { var e = this.sortDir == "up" ? "asc" : "desc"; var t = $.each(cols, function (e, t) { return t.dataIndx == this.sortIndx }); return { url: WCFServiceURL + "GetLogHeaders", data: "lob=" + currentLOB + "&currPage=" + this.curPage + "&pageSize=" + this.rPP + "&orderid=" + $("#txtlobSearch").val() + "&status=" + $("#ddlLOBStatus").val() + "&fromDate=" + $("#txtLOBfromdate").val() + "&toDate=" + $("#txtLOBtodate").val() + "&sortBy=" + t + "&sortDirection=" + e + "&tokenId=" + UIHelper.GetCookie("token")} }, getData: function (e) { if (e.status == "success") { LOBDetailData.length = 0; UIHelper.BindLOBDetail(); return { curPage: e.lob.currentPage, totalRecords: e.lob.totalRecords, data: e.lob.data} } else { UIHelper.CheckAuthorization(e.message) } } }; LOBDetailDataModel = { location: "local", dataType: "JSON", method: "GET", data: LOBDetailData }; CriticalDataModel = { location: "remote", dataType: "JSON", editable: false, method: "GET", getUrl: function () { var e = this.sortDir == "up" ? "asc" : "desc"; var t = new Array; return { url: WCFServiceURL + "GetLogHeaders", data: "status=Critical Errors&currPage=1&pageSize=&orderid=&tokenId=" + UIHelper.GetCookie("token")} }, getData: function (e) { if (e.status == "success") { return { data: e.lob.data} } else { UIHelper.CheckAuthorization(e.message) } } }; var e = $("#divCriticalErrors").pqGrid({ height: 250, dataModel: CriticalDataModel, colModel: [{ dataIndx: "lob", title: " ", width: 100, render: function (e) { var t = e.rowData, n = e.dataIndx, r = t[n]; return "<a href=\"javascript:UIHelper.SaveFilter('" + r + "','','Critical Errors','','');UIHelper.LoadTab('" + r + "',true);\" title='view complete list of " + r + " critical issues'><font color='blue'>" + r + "</font></a>" } }, { dataIndx: "outcomeHdrID", title: "ID", width: 100 }, { dataIndx: "slCode", title: "Solution Logic Code", width: 150 }, { dataIndx: "applicationID", title: "Application Name", width: 100 }, { dataIndx: "correlID", title: "CorrelID", width: 225 }, { dataIndx: "clientUserID", title: "User", width: 100 }, { dataIndx: "clientReqDateTime", title: "Request Time", width: 150 }, { dataIndx: "timeTaken", title: "Duration", width: 100 }, { dataIndx: "errorCode", title: "Error Code", width: 100}], title: "", resizable: false, columnBorders: true, editable: false, topVisible: false, numberCell: false, bottomVisible: false, rowSelect: function (e, t) { } }); $(".column").equalHeight(); $(".tablesorter").tablesorter(); $(".dateField").datepicker(); $("#dialog").dialog({ autoOpen: false, height: 300, width: 350, modal: true }); UIHelper.PopulateTabs(); UIHelper.GetMessages(); Highcharts.getOptions().colors = Highcharts.map(Highcharts.getOptions().colors, function (e) { return { radialGradient: { cx: .5, cy: .3, r: .7 }, stops: [[0, e], [1, Highcharts.Color(e).brighten(-.3).get("rgb")]]} }); $("#container").highcharts({ chart: { plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false }, loading: { labelStyle: { backgroundImage: 'url("loading.gif")'} }, title: { text: " " }, subtitle: { text: " " }, tooltip: { pointFormat: "{series.name}: <b>{point.y}</b>", percentageDecimals: 1 }, plotOptions: { pie: { allowPointSelect: true, cursor: "pointer", dataLabels: { enabled: true, color: "#000000", connectorColor: "#000000", formatter: function () { return "<b>" + this.point.name + "</b>:<br> " + Math.round(this.point.y) + "" } }} }, series: [{ type: "pie", name: "Browser share", point: { events: { click: function (e) { UIHelper.CreateOverallStatusBarChart(this.detail, this.name) } }}}] }); $("#containerBar").highcharts({ chart: { type: "column" }, title: { text: " " }, subtitle: { text: " ", events: { click: function (e) { alert("test") } } }, xAxis: {}, yAxis: { min: 0, title: { text: "transactions"} }, tooltip: { headerFormat: '<span style="font-size:10px">{point.key}</span><table>', pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' + '<td style="padding:0"><b>{point.y}</b></td></tr>', footerFormat: "</table>", shared: true, useHTML: true }, plotOptions: { column: { pointPadding: .2, borderWidth: 0 }, series: { cursor: "pointer", point: { events: { click: function () { UIHelper.SaveFilter(this.category, "", this.series.name, $("#txtOSfromdate").val(), $("#txtOStodate").val()); UIHelper.LoadTab(this.category, true) } }}} }, series: [{}] }); $("#container2").highcharts({ chart: { type: "column" }, title: { text: "Transactions in last 6 hours" }, subtitle: { text: "" }, xAxis: { categories: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], title: { text: "hours(hr)"} }, yAxis: { min: 0, title: { text: "transactions"} }, tooltip: { headerFormat: '<span style="font-size:10px">{point.key} sec</span><table>', pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' + '<td style="padding:0"><b>{point.y} </b></td></tr>', footerFormat: "</table>", shared: true, useHTML: true }, plotOptions: { column: { pointPadding: .2, borderWidth: 0} }, series: [{ name: "Transactions"}] }); UIHelper.PrepareOverallStatusChart(); UIHelper.PrepareHourlyChart(); $("tspan:contains('Highcharts.com')").css("display", "none"); $("#btnlobsearch").click(function () { $("div#" + currentLOB + "master").pqGrid("refreshDataAndView"); return false }); var t = self.setInterval(function () { $("#divCriticalErrors").pqGrid("refreshDataAndView"); UIHelper.GetMessages() }, 1e4) }); var UIHelper = { SetCookie: function (e, t) { var n = new Date; var r = 30; n.setTime(n.getTime() + r * 60 * 1e3); $.cookie(e, t, { expires: n, path: "/" }) }, DeleteCookie: function (e) { $.removeCookie(e, { path: "/" }) }, GetCookie: function (e) { return $.cookie(e) }, CheckAuthorization: function () { if (message == UnAuthorizedCode && document.location.href.substr(document.location.href.lastIndexOf("/") + 1) != "index.html") { document.location.href = "../index.html" } }, PrepareLOBScreen: function (e) { $.ajax({ url: "json/lobcolumns.json", method: "get", dataType: "json", success: function (t) { if (t.status == "success") { cols = t.columns; UIHelper.BindLOB(e) } else { UIHelper.CheckAuthorization(t.message) } }, error: function (e) { alert("There is an error occured while fetching LOB structure.") }, complete: function () { } }) }, BindLOBDetail: function () { gridDetail = $("div#" + currentLOB + "detail").pqGrid({ height: 250, dataModel: LOBDetailDataModel, colModel: colsDetail, title: currentLOB + " detail", resizable: false, columnBorders: true }) }, BindLOB: function (e) { var t = $("div#" + e + "master").pqGrid({ width: 950, height: 280, dataModel: LOBDataModel, colModel: cols, title: e + " master", resizable: false, columnBorders: true, editable: false, rowSelect: function (e, t) { LOBDetailData.length = 0; $.each(t.data[t.rowIndx].detail, function (e, t) { LOBDetailData.push(t) }); UIHelper.BindLOBDetail() } }); $("div#" + e + "master").attr("loaded", "true") }, SetWelcome: function () { var e = UIHelper.GetCookie("user"); if (e) { $("#username").text(e) } else { document.location.href = "../index.html" } }, Logout: function () { $.ajax({ url: WCFServiceURL + "Logout", method: "get", dataType: "json", data: "token=" + UIHelper.GetCookie("token"), success: function (e) { if (e.status == "success") { UIHelper.DeleteCookie("user"); UIHelper.DeleteCookie("token"); document.location.href = "../index.html" } }, error: function (e) { alert("There is an error occured while logout.") }, complete: function () { } }) }, GetColor: function (e) { switch (e) { case "Success": return "Green"; break; case "Errors": return "Red"; break; case "Warnings": return "#F5F3BA"; break; case "Critical Errors": return "#7b040f"; break } }, PrepareOverallStatusChart: function () { $("#container").highcharts().showLoading(); $.ajax({ url: WCFServiceURL + "GetOverallStatus", method: "get", dataType: "json", data: "fromDate=" + $("#txtOSfromdate").val() + "&toDate=" + $("#txtOStodate").val(), success: function (e) { var t = new Array; $.each(e.summary, function (e, n) { var r = new Object; r.name = n.status; var i = 0; $.each(n.detail, function () { i += parseInt(this.count) }); r.y = i; r.color = UIHelper.GetColor(n.status); r.detail = n.detail; t.push(r) }); UIHelper.CreateOverallStatusChart(t); $("tspan:contains('Highcharts.com')").css("display", "none") }, error: function (e) { alert("There is an error occured while creating chart.") }, complete: function () { $("#imgOSLoading").css("display", "none"); $("#container").highcharts().hideLoading() } }) }, CreateOverallStatusChart: function (e) { var t = $("#txtOSfromdate").val() != "" ? "Status from " + $("#txtOSfromdate").val() + " to " + $("#txtOStodate").val() : "Status for last two days"; var n = ""; if ($("#OSlob").val() != "All LOB") { n = "LOB: " + $("#OSlob").val() } var r = $("#container").highcharts(); r.series[0].setData(e); r.setTitle({ text: t }, { text: n }) }, PrepareOverallStatusBarChart: function (e) { $("#container").highcharts().showLoading(); $.ajax({ url: WCFServiceURL + "GetOverallStatus", method: "get", dataType: "json", data: "", success: function (t) { UIHelper.CreateOverallStatusBarChart(t.lob, e); $("tspan:contains('Highcharts.com')").css("display", "none") }, error: function (e) { alert("There is an error occured while creating chart.") }, complete: function () { $("#imgOSLoading").css("display", "none"); $("#container").highcharts().hideLoading() } }) }, CreateOverallStatusBarChart: function (e, t) { var n = new Array; var r = new Array; $.each(e, function () { n.push(this.name); r.push(this.count) }); var i = $("#txtOSfromdate").val() != "" ? "Status from " + $("#txtOSfromdate").val() + " to " + $("#txtOStodate").val() : "Status for last two days"; var s = ""; $("#container").css("display", "none"); $("#containerBar").css("display", "block"); var o = $("#containerBar").highcharts(); o.series[0].update({ name: t }, false); o.series[0].color = GetColor(t); o.redraw(); o.xAxis[0].setCategories(n); o.series[0].setData(r); o.setTitle({ text: i }, { text: s }) }, PrepareHourlyChart: function () { $("#container2").highcharts().showLoading(); $.ajax({ url: WCFServiceURL + "GetHourlyChart", method: "get", dataType: "json", data: "tokenId=" + UIHelper.GetCookie("token"), success: function (e) { if (e.status == "success") { var t = new Array; $.each(e.transactions, function (e, n) { t.push(n.transactions) }); UIHelper.CreateHourlyChart(t) } else { UIHelper.CheckAuthorization(e.message) } $("tspan:contains('Highcharts.com')").css("display", "none") }, error: function (e) { alert("There is an error occured while creating chart.") }, complete: function () { $("#imgOSLoading").css("display", "none"); $("#container2").highcharts().hideLoading() } }) }, CreateHourlyChart: function (e) { var t = $("#container2").highcharts(); t.series[0].setData(e) }, PopulateTabs: function () { $.ajax({ url: WCFServiceURL + "GetLOB", method: "get", dataType: "json", success: function (e) { if (e.status == "success") { UIHelper.CreateTabs(e.lobs) } else { UIHelper.CheckAuthorization(e.message) } }, error: function (e) { alert("There is an error occured while creating Tabs.") }, complete: function () { } }) }, SaveFilter: function (e, t, n, r, i) { var s = $("#" + e + "filter"); var o = new Object; o.orderId = t; o.status = n; o.fromDate = r; o.toDate = i; s.val(JSON.stringify(o)) }, LoadFilter: function (e) { var t = $("#" + e + "filter"); var n = ""; var r = "ALL"; var i = ""; var s = ""; if (t.val() != "") { var o = jQuery.parseJSON(t.val()); n = o.orderId; r = o.status; i = o.fromDate; s = o.toDate } $("#txtlobSearch").val(n); $("#ddlLOBStatus").val(r); $("#txtLOBfromdate").val(i); $("#txtLOBtodate").val(s) }, CreateTabs: function (e) { $.each(e, function (e, t) { $("#tabsDiv").append("<div class='breadcrumb_divider'></div> <a href=\"javascript:UIHelper.LoadTab('" + t.name + "',false);\">" + t.name + "</a>"); $("#LOBMasterContainer").append("<div id='" + t.name + "master' style='margin-left:15px;' class='lobmastergrid' loaded=false></div><input type='hidden' id='" + t.name + "filter'>"); $("#LOBDetailContainer").append("<div id='" + t.name + "detail' style='margin-left:15px;width:96% !important;' class='lobdetailgrid'></div>") }) }, LoadTab: function (e, t) { var n = $("#tabsDiv a:contains('" + e + "')"); UIHelper.EnableDisableTab(e, n); $("#Dashboard.tabsDiv").css("display", e == "Dashboard" ? "inline" : "none"); if (e != "Dashboard") { currentLOB = e; if ($("div#" + currentLOB + "master").attr("loaded") == "false" || t == true) { UIHelper.PrepareLOBScreen(currentLOB) } $("div.lobmastergrid").css("display", "none"); $("div#" + currentLOB + "master").css("display", "block"); $("div.lobdetailgrid").css("display", "none"); $("div#" + currentLOB + "detail").css("display", "block") } $("#LOB.tabsDiv").css("display", e == "Dashboard" ? "none" : "inline") }, EnableDisableTab: function (e, t) { var n = $("#tabsDiv a.current"); n.removeClass("current"); n.attr("href", "javascript:UIHelper.LoadTab('" + n.text() + "',false)"); if (n.text() != "Dashboard") UIHelper.SaveFilter(n.text(), $("#txtlobSearch").val(), $("#ddlLOBStatus").val(), $("#txtLOBfromdate").val(), $("#txtLOBtodate").val()); if (e != "Dashboard") UIHelper.LoadFilter(e); t.removeAttr("href"); t.addClass("current") }, ValidateOS: function () { $("#containerBar").css("display", "none"); $("#container").css("display", "block"); UIHelper.PrepareOverallStatusChart(); return false }, ResetOS: function () { $("#txtOSfromdate").val(""); $("#txtOStodate").val(""); $("#OSlob").prop("selectedIndex", 0); UIHelper.PrepareOverallStatusChart() }, ResetLOB: function () { $("#txtLOBfromdate").val(""); $("#txtLOBtodate").val(""); $("#ddlLOBStatus").prop("selectedIndex", 0); UIHelper.PrepareLOBScreen(currentLOB) }, ReloadOS: function () { $("#containerBar").css("display", "none"); $("#container").css("display", "block"); UIHelper.PrepareOverallStatusChart() }, ReloadHC: function () { UIHelper.PrepareHourlyChart() }, ExportToExcel: function () { $("#divExport").html("<b><u>" + currentLOB + "</u></b><br><br>" + $("#Ordermaster div.pq-grid-right").html()); $("#divExport div span:eq(0)").remove(); $("#divExport div span div.pq-grid-col-resize-handle").remove(); $("#divExport div span div.pq-grid-header-table-div")[0].innerText = "S. No"; $("#divExport div span div.pq-grid-header-table-div").css("font-weight", "bold"); $("#divExport .pq-row-hidden").remove(); window.open("data:application/vnd.ms-excel," + encodeURIComponent($("#divExport").html())) }, ValidateMessage: function (e) { if (e.txtmessage.value != "" && e.txtmessage.value != "Enter Message") { UIHelper.InsertMessage(e.txtmessage.value) } return false }, InsertMessage: function (e) { $.ajax({ url: WCFServiceURL + "PostMessage", method: "get", dataType: "json", data: "tokenId=" + UIHelper.GetCookie("token") + "&message=" + e, success: function (e) { if (e.status == "success") { UIHelper.GetMessages() } else { UIHelper.CheckAuthorization(e.message) } }, error: function (e) { alert("There is an error occured while inserting message.") }, complete: function () { } }) }, GetMessages: function () { $.ajax({ url: WCFServiceURL + "GetMessages", method: "get", dataType: "json", data: "tokenId=" + UIHelper.GetCookie("token"), success: function (e) { if (e.status == "success") { $("#messageDiv").empty(); $.each(e.messages, function () { $("#messageDiv").append("<div class='message'><p>" + this.message + "</p><p><strong>" + this.username + " (" + this.messageDate + ")</strong></p></div>") }) } else { UIHelper.CheckAuthorization(e.message) } }, error: function (e) { alert("There is an error occured while retreiving messages Tabs.") }, complete: function () { } }) } }