// JScript source code


var currentLOB;
var LOBDataModel, LOBDetailDataModel;
var cols, colsDetail;
var LOBDetailData = new Array();
var sort = new Array();
var Tabs=new Object();
var gridDetail;
var UnAuthorizedCode = "Err2031";
var AdminSetupEnum=new Object();
AdminSetupEnum.UserManagement=1;
AdminSetupEnum.TabManagement=2;
AdminSetupEnum.NotificationEmails=3;


colsDetail = [{ title: "Detail ID", width: 100, dataIndx: "outcomeDTLID", editable: true },
                        { title: "Application Code", width: 100, dataIndx: "applicationCode" },
                        { title: "FLow Name", width: 150, dataIndx: "slStepName" },
                        { title: "Log Level", width: 100, dataIndx: "errorType" },
                        { title: "Error Code", width: 100, dataIndx: "sourceSystemErrorCode" },
                        { title: "Error Desc", width: 150, dataIndx: "sourceSystemErrorDesc" },
                        { title: "Input Message", width: 290, dataIndx: "inputPayload", editable: true,
                            render: function (ui) {
                                var rowData = ui.rowData,
                                dataIndx = ui.dataIndx,
                                cellData = rowData[dataIndx];
                                return "<textarea readonly cols='40' rows='5'>" + cellData + "</textarea>";
                            }
                        },
                        { title: "Output Message", width: 290, dataIndx: "outputPayload", editable: true,
                            render: function (ui) {
                                var rowData = ui.rowData,
                                dataIndx = ui.dataIndx,
                                cellData = rowData[dataIndx];
                                return "<textarea readonly cols='40' rows='5'>" + cellData + "</textarea>";
                            }
                        }];



  $(document).ready(function () {
  
            UIHelper.SetWelcome();
            $("#logout").click(function(){
                UIHelper.Logout();
            });
//            $("#btnCancelEmails").click(function(){
//                UIHelper.HidePopup(AdminSetupEnum.NotificationEmails);
//            });
//            $("#btnSaveEmails").click(function(){
//                UIHelper.SaveEmails();
//            });
            $("#btn").click(function(){
                 UIHelper.EmptyUserFormControls();
                 UIHelper.PopulateLOBCheckboxes();
                 $("#divUserForm").dialog("open").css('display','inline');                 
            });
            $("#btnCreateTab").click(function(){
                UIHelper.EmptyTabFormControls();
                $("#lblTabStatus").css('display','none');
                $("#TabStatus").prop('checked', true);
                $("#divTabForm").dialog("open").css('display','inline');
            });
             $("#btnCreateNotification").click(function(){
                UIHelper.EmptyNFFormControls();                
                $("#divNFEmailForm").dialog("open");
            });
            $(".quick_search").submit(function(){
                
                if($("#SMID").val()=="" || $("#SMID").val()=="ID"){
                    alert('Please enter ID');
                    $("#SMID").focus();
                }
                else
                {
                    $("#divStateMachine").dialog({
                    height: 400,
                    width: 590,
                    modal: true
                    }).css('display','inline');  
                    UIHelper.PopulateStates();
                }
                return false;

            });
            
            UIHelper.AdminSetup();

            //user detail form start

            var name = $( "#Username" ),
            email = $( "#Email" ),
            password = $( "#Password" ),
            allFields = $( [] ).add( name ).add( email ).add( password ),
            tips = $( ".validateTips" );
 
            function updateTips( t ) {
              tips
                .text( t )
                .addClass( "ui-state-highlight" );
              setTimeout(function() {
                tips.removeClass( "ui-state-highlight", 1500 );
              }, 500 );
            }
 
            function checkLength( o, n, min, max ) {
              if ( o.val().length > max || o.val().length < min ) {
                o.addClass( "ui-state-error" );
                updateTips( "Length of " + n + " must be between " +
                  min + " and " + max + "." );
                return false;
              } else {
                return true;
              }
            }
 
            function checkRegexp( o, regexp, n ) {
              if ( !( regexp.test( o.val() ) ) ) {
                o.addClass( "ui-state-error" );
                updateTips( n );
                return false;
              } else {
                return true;
              }
            }
            $( "#divUserForm" ).dialog({
                  autoOpen: false,
                  height: 300,
                  width: 450,
                  modal: true,
                  buttons: {
                    "Create an account": function() {
                    debugger;
                      var bValid = true;
                      allFields.removeClass( "ui-state-error" );
 
                      bValid = bValid && checkLength( name, "username", 3, 16 );
                      bValid = bValid && checkLength( password, "password", 5, 16 );
                      bValid = bValid && checkLength( email, "email", 6, 80 );
                      
 
                      //bValid = bValid && checkRegexp( name, /^[a-z]([0-9a-z_])+$/i, "Username may consist of a-z, 0-9, underscores, begin with a letter." );
                      // From jquery.validate.js (by joern), contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
                      bValid = bValid && checkRegexp( email, /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i, "Invalid email" );
                      //bValid = bValid && checkRegexp( password, /^([0-9a-zA-Z])+$/, "Password field only allow : a-z 0-9" );
 
                      if ( bValid ) {
                        
                        //ajax call for insert
                        debugger;

                        var UserLobs=UIHelper.GetCheckedLOBs();
                         //ajax call for insert
                        $.ajax({
                            //url: 'json/saveuser.json',
                            url: WCFServiceURL + "SaveUser",
                            method: 'get',
                            dataType: 'json',                           
                            //data: 'tokenId=' + UIHelper.GetCookie("token") + "&id=" + $("#UserID").val() + "&name=" + $("#Username").val() + "&password=" + $("#Password").val() + "&email=" + $("#Email").val() + "&status=" + $("#UserStatus").is(':checked') + "&userlobs=" + UserLobs,
                            data: 'tokenId=' + UIHelper.GetCookie("token") + "&id=" + $("#UserID").val() + "&name=" + $("#Username").val() + "&password=" + $("#Password").val() + "&email=" + $("#Email").val() + "&status=" + $("#UserStatus").is(':checked') + "&userlobs=" + UserLobs,
                            success: function (data) {
                                if (data.status == "success") {
                                    alert('user saved successfully.');
                                    $("#divUserForm" ).dialog( "close" );
                                    UIHelper.BindUserGrid();
                                }
                                else if (data.status == "duplicate") {
                                    alert('Username already exist.');
                                    $("#Username").focus();
                                }
                                else {
                                    UIHelper.CheckAuthorization(data.message);
                                }
                                
                            },
                            error: function (err) {
                                alert('There is an error occured while saving user.');
                            },
                            complete: function () {

                            }
                        });                       
                      }
                    },
                    Cancel: function() {
                      $( this ).dialog( "close" ).css('display','none');
                    }
                  },
                  close: function() {
                    allFields.val( "" ).removeClass( "ui-state-error" );
                  }
                });

            //user detail form end


            //Tab detail form
             $( "#divTabForm" ).dialog({
                  autoOpen: false,
                  height: 200,
                  width: 400,
                  modal: true,
                  buttons: {
                    "Save": function() {
            	 debugger;
                      var bValid = true;
                      allFields.removeClass( "ui-state-error" );
                      if($("#TabName").val()=="")
                      {
                        alert("Please enter name");
                        $("#TabName").focus();
                      }
                      else  
                      {              
                        //ajax call for insert
                        $.ajax({
                            //url: 'json/savetab.json',
                        	url: WCFServiceURL + "SaveTab",
                            method: 'get',
                            dataType: 'json',     
                            //data: 'tokenId=' + UIHelper.GetCookie("token") + "&id=" + $("#TabID").val() + "&name=" + $("#TabName").val() + "&status=" + $("#TabStatus").is(':checked'),
                            data: 'tokenId=' + UIHelper.GetCookie("token") + "&id=" + $("#TabID").val() + "&name=" + $("#TabName").val() + "&status=" + $("#TabStatus").is(':checked'),
                            success: function (data) {
                                if (data.status == "success") {
                                    $("#divTabForm" ).dialog( "close" );
                                    UIHelper.BindTabGrid();
                                }
                                else if (data.status == "duplicate") {
                                    alert('Tab name already exist.');
                                    $("#tabname").focus();
                                }
                                else {
                                    UIHelper.CheckAuthorization(data.message);
                                }
                                
                            },
                            error: function (err) {
                                alert('There is an error occured while saving Tab.');
                            },
                            complete: function () {

                            }
                        });                       
                      }
                    },
                    Cancel: function() {
                      $( this ).dialog( "close" ).css('display','none');
                    }
                  },
                  close: function() {
                    allFields.val( "" ).removeClass( "ui-state-error" );
                  }
                });

            //user tab form end


            //notification form start
            //Tab detail form
             $( "#divNFEmailForm" ).dialog({
                  autoOpen: false,
                  height: 430,
                  width: 460,
                  modal: true,
                  buttons: {
                    "Save": function() {
                      var bValid = true;
                      allFields.removeClass( "ui-state-error" );
                      if($("#NFLob").val()=="")
                      {
                        alert("Please select business object");
                        $("#NFLob").focus();
                      }
                      else if($("#Event").val()=="")
                      {
                        alert("Please select event");
                        $("#Event").focus();
                      }
                      else  
                      {              
                        //ajax call for insert
                        $.ajax({
                            //url: 'json/savenfemail.json',
                        	url: WCFServiceURL + "SaveNfeMail",
                            method: 'get',
                            dataType: 'json',                           
                            data: 'tokenId=' + UIHelper.GetCookie("token") + "&id=" + $("#NFID").val() + "&lob=" + $("#NFLob").val() + "&event=" + $("#Event").val() + "&emails=" + $("#NFEmails").val(),
                            success: function (data) {
                                if (data.status == "success") {
                                    $("#divNFEmailForm" ).dialog( "close" );
                                    UIHelper.BindNFEmailsGrid();
                                } 
                                else  if (data.status == "duplicate") {
                                    alert('Event already exist for the selected business object.');
                                }                              
                                else {
                                    UIHelper.CheckAuthorization(data.message);
                                }
                                
                            },
                            error: function (err) {
                                alert('There is an error occured while saving Notification.');
                            },
                            complete: function () {

                            }
                        });                       
                      }
                    },
                    Cancel: function() {
                      $( this ).dialog( "close" ).css('display','none');
                    }
                  },
                  close: function() {
                    allFields.val( "" ).removeClass( "ui-state-error" );
                  }
                });
            //notification form end

            LOBDataModel = {
                location: "remote",
                sorting: "remote",
                paging: "remote",
                dataType: "JSON",
                editable: false,
                method: "GET",
                curPage: 1,
                rPP: 5,
                sortIndx: 0,
                sortDir: "down",
                topVisible: false,
                rPPOptions: [5, 10, 20, 30, 40, 50, 100],
                getUrl: function () {
                    var sortDir = (this.sortDir == "up") ? "asc" : "desc";
                    
                    var sortBy= $.each(cols, function (i, item) {
                        return item.dataIndx==this.sortIndx;
                    });
                    
                    return { url: WCFServiceURL + "GetLogHeaders",data: "lob=" + currentLOB + "&currPage=" + this.curPage + "&pageSize=" + this.rPP  + "&orderid=" + $('#txtlobSearch').val() + "&status=" + $('#ddlLOBStatus').val() + "&fromDate=" + $('#txtLOBfromdate').val() + "&toDate=" + $('#txtLOBtodate').val() + "&sortBy=" + sortBy + "&sortDirection=" + sortDir + "&tokenId=" + UIHelper.GetCookie("token")
                    //return { url: "json/lob.json"//,data: "lob=" + currentLOB + "&currPage=" + this.curPage + "&pageSize=" + this.rPP  + "&orderid=" + $('#txtlobSearch').val() + "&status=" + $('#ddlLOBStatus').val()   //"&sortBy=" + sort[this.sortIndx] + "&sortDirection=" + sortDir
                    };
                                   


                },
                getData: function (data) {
                    if (data.status == "success") {
                        LOBDetailData.length = 0;
                        UIHelper.BindLOBDetail();
                        return { curPage: data.lob.currentPage, totalRecords: data.lob.totalRecords, data: data.lob.data };
                    }
                    else{
                        UIHelper.CheckAuthorization(data.message)                       
                    }
                }
            }

            LOBDetailDataModel = {
                location: "local",
                dataType: "JSON",
                method: "GET",
                data: LOBDetailData
            }


            //Critical Error Container start

            CriticalDataModel = {
                location: "remote",
                dataType: "JSON",
                editable: false,
                method: "GET",
                getUrl: function () {
                    var sortDir = (this.sortDir == "up") ? "asc" : "desc";
                    var sort = new Array();
                    //return { url: "json/lob.json", data: "status=Critical Errors&currPage=1&pageSize=7"
                    return { url: WCFServiceURL + "GetLogHeaders", data: "status=Critical Errors&currPage=1&pageSize=&orderid=&tokenId=" + UIHelper.GetCookie("token")
                    
                    };
                },
                getData: function (data) {
                    if (data.status == "success") {
                        return { data: data.lob.data };
                    }
                    else{
                        UIHelper.CheckAuthorization(data.message)                       
                    }
                }
            }
            var grid2 = $("#divCriticalErrors").pqGrid({ height: 250,
                dataModel: CriticalDataModel,
                
                colModel: [

                            { "dataIndx": "lob", "title": " ", "width": 100,
                                render: function (ui) {
                                    var rowData = ui.rowData,
                                    dataIndx = ui.dataIndx,
                                    cellData = rowData[dataIndx];
                                    return "<a href=\"javascript:UIHelper.SaveFilter('" + cellData + "','','Critical Errors','','');UIHelper.LoadTab('" + cellData + "',true);\" title='view complete list of " + cellData + " critical issues'><font color='blue'>" + cellData + "</font></a>";
                                }
                            },
                            { "dataIndx": "outcomeHdrID", "title": "ID", "width": 100 },
					        { "dataIndx": "slCode", "title": "Solution Logic Code", "width": 150 },
					        { "dataIndx": "applicationID", "title": "Application Name", "width": 100 },
					        { "dataIndx": "correlID", "title": "CorrelID", "width": 225 },
					        { "dataIndx": "clientUserID", "title": "User", "width": 100 },
					        { "dataIndx": "clientReqDateTime", "title": "Request Time", "width": 150 },
					        { "dataIndx": "timeTaken", "title": "Duration", "width": 100 },
					        { "dataIndx": "errorCode", "title": "Error Code", "width": 100 }
                ],
                title: "",
                resizable: false,
                columnBorders: true,
                editable: false,
                topVisible: false,
                numberCell: false,
                bottomVisible: false,
                rowSelect: function (evt, obj) {
                    //                    $("#ddlLOBStatus").val("Critical Errors");
                    //                    LoadTab(obj.data[obj.rowIndx].lob, true);

                }
            });

            //Critical Error Container end


            
            //User grid start

            UserDataModel = {
                location: "remote",
                dataType: "JSON",
                editable: false,
                method: "GET",
              
               
                getUrl: function () {
                    var sortDir = (this.sortDir == "up") ? "asc" : "desc";
                    var sort = new Array();
                    //return { url: "json/users.json", data: ""
                    return { url: WCFServiceURL + "GetUsers", data: "username=&tokenId=" + UIHelper.GetCookie("token")
                    
                    };
                },
                getData: function (data) {
                    if (data.status == "success") {
                        return { data: data.users };
                    }
                    else{
                        UIHelper.CheckAuthorization(data.message)                       
                    }
                }
            }
           
            //User Grid end


            //Tab grid start

            TabDataModel = {
                location: "remote",
                dataType: "JSON",
                editable: false,
                method: "GET",
               
                getUrl: function () {
                    var sortDir = (this.sortDir == "up") ? "asc" : "desc";
                    var sort = new Array();
                    //return { url: "json/alltabs.json", data: ""
                    //return { url: WCFServiceURL + "GetAllTabs", data: "username=&tokenId=" + UIHelper.GetCookie("token")
                    return { url: WCFServiceURL + "GetLOB", data: "username=&tokenId=" + UIHelper.GetCookie("token")
                    
                    };
                },
                getData: function (data) {
                    if (data.status == "success") {
                        return { data: data.lobs, currPage: 1 };
                    }
                    else{
                        UIHelper.CheckAuthorization(data.message)                       
                    }
                }
            }
           
            //Tab Grid end
            

//NF Emails grid start

            NFEmailsDataModel = {
                location: "remote",
                dataType: "JSON",
                editable: false,
                method: "GET",               
                
                getUrl: function () {
                    var sortDir = (this.sortDir == "up") ? "asc" : "desc";
                    var sort = new Array();
                    //return { url: "json/nfemails.json", data: ""
                    //return { url: WCFServiceURL + "GetAllTabs", data: "username=&tokenId=" + UIHelper.GetCookie("token")
                    return { url: WCFServiceURL + "GetLOB", data: "username=&tokenId=" + UIHelper.GetCookie("token")
                    
                    };
                },
                getData: function (data) {
                    if (data.status == "success") {
                        return { data: data.nfemails };
                    }
                    else{
                        UIHelper.CheckAuthorization(data.message)                       
                    }
                }
            }
           
            //NF Emails Grid end


            
            $('.column').equalHeight();
            $(".tablesorter").tablesorter();
            $('.dateField').datepicker();
            

            UIHelper.PopulateTabs();
           // UIHelper.GetMessages();
          

            Highcharts.getOptions().colors = Highcharts.map(Highcharts.getOptions().colors, function (color) {
                return {
                    radialGradient: { cx: 0.5, cy: 0.3, r: 0.7 },
                    stops: [
		            [0, color],
		            [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
		        ]
                };
            });

            // Build the overall status chart - start
            $('#container').highcharts({
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false
                },
                loading: {
                    labelStyle: {
                        backgroundImage: 'url("loading.gif")'

                    }
                },
                title: {
                    text: ' '
                },
                subtitle: {
                    text: ' '
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.y}</b>',
                    percentageDecimals: 1
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            color: '#000000',
                            connectorColor: '#000000',
                            formatter: function () {
                                return '<b>' + this.point.name + '</b>:<br> ' + Math.round(this.point.y) + '';
                            }
                        }
                    }
                },
                series: [{
                    type: 'pie',
                    name: 'Browser share',
                    point: {
                        events: {
                            click: function (event) {
                                UIHelper.CreateOverallStatusBarChart(this.detail,this.name);
                                  //PrepareOverallStatusBarChart(this.name);
//                                if ($("#OSlob").val() != "All LOB") {
//                                    $("#ddlLOBStatus").val(this.name);
//                                    LoadTab($("#OSlob").val(), true);
//                                }
                            }
                        }
                    }
                }]
            });

            // Build the overall status chart - end


            //Build the overall status break up chart- start
            $('#containerBar').highcharts({
            chart: {
                type: 'column'
            },
            title: {
                text: ' '
            },
            subtitle: {
                text: ' ',
                events: {
                    click: function (event) {
                        alert('test');
                    }
                }
            },
            xAxis: {
                
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'transactions'
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y}</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                },
                series: {
                    cursor: 'pointer',
                    point: {
                            events: {
                                click: function () {
                                    UIHelper.SaveFilter(this.category,'',this.series.name,$('#txtOSfromdate').val(),$('#txtOStodate').val());
                                    UIHelper.LoadTab(this.category, true);
                                }
                            }
                        }
                    }
            },
            series: [{
                   
                
            }]
        });

            

            //Build the overall status break up chart- end


            //Build the hoursly transaction chart- start
            $('#container2').highcharts({
                            chart: {
                                type: 'column'
                            },
                            title: {
                                text: 'Transactions in last 6 hours'
                            },
                            subtitle: {
                                text: ''
                            },
                            xAxis: {
                                categories: [     
                                '1','2','3','4','5','6','7','8','9','10','11','12'

                            ],
                            title: {
                                    text: 'hours(hr)'
                                },
                            },
                            yAxis: {
                                min: 0,
                                title: {
                                    text: 'transactions'
                                },
                                //max: 200
                            },
                            tooltip: {
                                headerFormat: '<span style="font-size:10px">{point.key} sec</span><table>',
                                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                                '<td style="padding:0"><b>{point.y} </b></td></tr>',
                                footerFormat: '</table>',
                                shared: true,
                                useHTML: true
                            },
                            plotOptions: {
                                column: {
                                    pointPadding: 0.2,
                                    borderWidth: 0
                                }
                            },
                            series: [{
                                name: 'Transactions'
                            }]
                        });
                //Build the hoursly transaction chart- end


            UIHelper.PrepareOverallStatusChart();
            UIHelper.PrepareHourlyChart();

           
                        

            $("tspan:contains('Highcharts.com')").css('display', 'none');

             $("#btnlobsearch").click(function(){
                $("div#" + currentLOB + "master").pqGrid("refreshDataAndView");
                return false;
             });
            // var int=self.setInterval(function(){$("#divCriticalErrors").pqGrid("refreshDataAndView");UIHelper.GetMessages();},10000);

            });
    



//UIHelper class
var UIHelper = {
    SetCookie: function (name, value) {
        var date = new Date();
        var minutes = 30;
        date.setTime(date.getTime() + (minutes * 60 * 1000));
        $.cookie(name, value, { expires: date, path: '/' });
    },
    DeleteCookie: function (name) {
        $.removeCookie(name, { path: '/' });
    },
    GetCookie: function (name) {
        return $.cookie(name);
    },
    CheckAuthorization: function () {
        if (message == UnAuthorizedCode && document.location.href.substr(document.location.href.lastIndexOf("/") + 1) != "index.html") {
            document.location.href = "../index.html";
        }
    },
    PrepareLOBScreen: function (name) {
        $.ajax({
            url: 'json/lobcolumns.json',
            //url: WCFServiceURL + "LobColumns",
            method: 'get',
            dataType: 'json',
            //data: 'tokenId=' + GetCookie("token"),
            success: function (data) {
                if (data.status == "success") {
                    cols = data.columns;
                    UIHelper.BindLOB(name);
                }
                else {
                    UIHelper.CheckAuthorization(data.message);
                }
            },
            error: function (err) {
                alert('There is an error occured while fetching LOB structure.');
            },
            complete: function () {

            }
        });
    },
    BindLOBDetail: function () {
        gridDetail = $("div#" + currentLOB + "detail").pqGrid({ height: 250,
            dataModel: LOBDetailDataModel,
            colModel: colsDetail,
            title: currentLOB + " detail",
            resizable: false,
            columnBorders: true
        });
    },
    BindLOB: function (lob) {
        var grid1 = $("div#" + lob + "master").pqGrid({ width: 950, height: 280,
            dataModel: LOBDataModel,
            colModel: cols,
            title: lob + " master",
            resizable: false,
            columnBorders: true,
            editable: false,
            rowSelect: function (evt, obj) {
                LOBDetailData.length = 0;
                $.each(obj.data[obj.rowIndx].detail, function (i, item) {
                    LOBDetailData.push(item);
                });
                UIHelper.BindLOBDetail();
            }
        });
        $("div#" + lob + "master").attr('loaded', 'true');
    },
    SetWelcome: function () {
        var username = UIHelper.GetCookie("user");
        if (username) {
            $("#username").text(username);
        }
        else {
            document.location.href = "../index.html";
        }
    },
    Logout: function () {    
        $.ajax({
            //url: 'json/logout.json',
            url: WCFServiceURL + "Logout",
            method: 'get',
            dataType: 'json',
            data: 'token=' + UIHelper.GetCookie("token"),
            success: function (response) {
                if (response.status == "success") {
                    UIHelper.DeleteCookie('user');
                    UIHelper.DeleteCookie('token');
                    document.location.href = "../index.html";
                }
            },
            error: function (err) {
                alert('There is an error occured while logout.');
            },
            complete: function () {
              
            }
        });
    },
    GetColor: function (colorName) {
        switch (colorName) {
            case "Success":
                return "Green";
                break;
            case "Errors":
                return "Red";
                break;
            case "Warnings":
                return "#F5F3BA";
                break;
            case "Critical Errors":
                return "#7b040f";
                break;

        }
    },
    PrepareOverallStatusChart: function () {

        //$("#imgOSLoading").css('display', 'inline');
        $('#container').highcharts().showLoading();
        $.ajax({
            //url: 'json/overallstatusbreakup1.json',
            url: WCFServiceURL + "GetOverallStatus",
            method: 'get',
            dataType: 'json',
            data: 'fromDate=' + $('#txtOSfromdate').val() + '&toDate=' + $('#txtOStodate').val(),
            success: function (data) {
                var dataArray = new Array();
                $.each(data.summary, function (i, item) {
                    var obj = new Object();
                    obj.name = item.status;
                    var count = 0;
                    $.each(item.detail, function () {
                        count += parseInt(this.count);
                    });
                    obj.y = count;
                    obj.color = UIHelper.GetColor(item.status);
                    obj.detail = item.detail;
                    dataArray.push(obj);
                });
                UIHelper.CreateOverallStatusChart(dataArray);
                $("tspan:contains('Highcharts.com')").css('display', 'none');
            },
            error: function (err) {
                alert('There is an error occured while creating chart.');
            },
            complete: function () {
                //var display = $("#txtOStodate").val() == "" ? "none" : "inline";
                $("#imgOSLoading").css('display', 'none');
                //$("#imgOSundo").css('display', display);
                $('#container').highcharts().hideLoading();
            }
        });
    },
    CreateOverallStatusChart: function (lob) {
        var title = $('#txtOSfromdate').val() != "" ? "Status from " + $('#txtOSfromdate').val() + " to " + $('#txtOStodate').val() : "Status for last two days";
        var subtitle = "";
        if ($("#OSlob").val() != "All LOB") {
            subtitle = "LOB: " + $("#OSlob").val();
        }
        var chart = $('#container').highcharts();
        chart.series[0].setData(lob);
        chart.setTitle({ text: title }, { text: subtitle });
    },
    PrepareOverallStatusBarChart: function (name) {
        //$("#imgOSLoading").css('display', 'inline');
        $('#container').highcharts().showLoading();
        $.ajax({
            //url: 'json/overallstatusbreakup.json',
            url: WCFServiceURL + "GetOverallStatus",
            method: 'get',
            dataType: 'json',
            data: '',
            success: function (data) {
                UIHelper.CreateOverallStatusBarChart(data.lob, name);
                $("tspan:contains('Highcharts.com')").css('display', 'none');
            },
            error: function (err) {
                alert('There is an error occured while creating chart.');
            },
            complete: function () {
                //var display = $("#txtOStodate").val() == "" ? "none" : "inline";
                $("#imgOSLoading").css('display', 'none');
                //$("#imgOSundo").css('display', display);
                $('#container').highcharts().hideLoading();
            }
        });
    },
    CreateOverallStatusBarChart: function (data, name) {
        var categories = new Array();
        var values = new Array();
        $.each(data, function () {
            categories.push(this.name)
            values.push(this.count)
        });
        var title = $('#txtOSfromdate').val() != "" ? "Status from " + $('#txtOSfromdate').val() + " to " + $('#txtOStodate').val() : "Status for last two days";
        var subtitle = ""; //"Back";
        //subtitle = "Status: " + name;
        $("#container").css('display', 'none');
        $("#containerBar").css('display', 'block');
        var chart = $('#containerBar').highcharts();
        chart.series[0].update({ name: name }, false);
        chart.series[0].color = GetColor(name);
        chart.redraw();
        chart.xAxis[0].setCategories(categories);
        chart.series[0].setData(values);
        chart.setTitle({ text: title }, { text: subtitle });
    },
    PrepareHourlyChart: function () {
        //$("#imgOSLoading").css('display', 'inline');
        $('#container2').highcharts().showLoading();
        $.ajax({
            //url: 'json/hourlytransactions.json',
            url: WCFServiceURL + "GetHourlyChart",
            method: 'get',
            dataType: 'json',
            data: 'tokenId=' + UIHelper.GetCookie("token"),
            success: function (data) {
                if (data.status == "success") {
                    var dataArray = new Array();
                    $.each(data.transactions, function (i, item) {
                        dataArray.push(item.transactions);
                    });
                    UIHelper.CreateHourlyChart(dataArray);
                }
                else {
                    UIHelper.CheckAuthorization(data.message)
                }
                $("tspan:contains('Highcharts.com')").css('display', 'none');
            },
            error: function (err) {
                alert('There is an error occured while creating chart.');
            },
            complete: function () {
                //var display = $("#txtOStodate").val() == "" ? "none" : "inline";
                $("#imgOSLoading").css('display', 'none');
                //$("#imgOSundo").css('display', display);
                $('#container2').highcharts().hideLoading();
            }
        });
    },
    CreateHourlyChart: function (data) {
        var chart = $('#container2').highcharts();
        chart.series[0].setData(data);
    },
    PopulateTabs: function () {
        $.ajax({
            //url: 'json/tabs.json',
            url: WCFServiceURL + "GetLOB",
            method: 'get',
            dataType: 'json',
            data: 'tokenId=' + UIHelper.GetCookie("token"),
            success: function (data) {
                if (data.status == "success") {
                    UIHelper.CreateTabs(data.lobs);
                    Tabs=data.lobs;
                    UIHelper.PopulateSMLobDropdown();
                }
                else {
                    UIHelper.CheckAuthorization(data.message)
                }
            },
            error: function (err) {
                alert('There is an error occured while creating Tabs.');
            },
            complete: function () {

            }
        });
    },
    SaveFilter: function (lob, orderId, status, fromDate, toDate) {
        var filterObj = $("#" + lob + "filter");
        var filter = new Object();
        filter.orderId = orderId;
        filter.status = status;
        filter.fromDate = fromDate;
        filter.toDate = toDate;
        filterObj.val(JSON.stringify(filter));
    },
    LoadFilter: function (lob) {
        var filterObj = $("#" + lob + "filter");
        var orderId = ""; var status = "ALL"; var fromDate = ""; var toDate = "";
        if (filterObj.val() != "") {
            var filter = jQuery.parseJSON(filterObj.val());
            orderId = filter.orderId;
            status = filter.status;
            fromDate = filter.fromDate;
            toDate = filter.toDate;
        }
        $("#txtlobSearch").val(orderId);
        $("#ddlLOBStatus").val(status);
        $("#txtLOBfromdate").val(fromDate);
        $("#txtLOBtodate").val(toDate);
    },
    CreateTabs: function (tabs) {
        $.each(tabs, function (i, item) {
            $("#tabsDiv").append("<div class='breadcrumb_divider'></div> <a href=\"javascript:UIHelper.LoadTab('" + item.name + "',false);\">" + item.name + "</a>");
            $("#LOBMasterContainer").append("<div id='" + item.name + "master' style='margin-left:15px;' class='lobmastergrid' loaded=false></div><input type='hidden' id='" + item.name + "filter'>");
            $("#LOBDetailContainer").append("<div id='" + item.name + "detail' style='margin-left:15px;width:96% !important;' class='lobdetailgrid'></div>");
        });
    },
    LoadTab: function (name, chartDetail) {
        var newTab = $("#tabsDiv a:contains('" + name + "')");
        UIHelper.EnableDisableTab(name, newTab);
        $("#Dashboard.tabsDiv").css('display', (name == "Dashboard") ? 'inline' : 'none');
        if (name != "Dashboard") {
            currentLOB = name;
            if ($("div#" + currentLOB + "master").attr('loaded') == "false" || chartDetail == true) {
                UIHelper.PrepareLOBScreen(currentLOB);
            }
            $("div.lobmastergrid").css('display', 'none');
            $("div#" + currentLOB + "master").css('display', 'block');
            $("div.lobdetailgrid").css('display', 'none');
            $("div#" + currentLOB + "detail").css('display', 'block');

        }
        $("#LOB.tabsDiv").css('display', (name == "Dashboard") ? 'none' : 'inline');

    },
    EnableDisableTab: function (name, newTab) {
        var currentTab = $("#tabsDiv a.current");
        currentTab.removeClass('current');
        currentTab.attr("href", "javascript:UIHelper.LoadTab('" + currentTab.text() + "',false)");
        if (currentTab.text() != "Dashboard")
            UIHelper.SaveFilter(currentTab.text(), $("#txtlobSearch").val(), $("#ddlLOBStatus").val(), $("#txtLOBfromdate").val(), $("#txtLOBtodate").val());
        if (name != 'Dashboard')
            UIHelper.LoadFilter(name);
        newTab.removeAttr('href');
        newTab.addClass('current');
    },
    ValidateOS: function () {
        $("#containerBar").css('display', 'none');
        $("#container").css('display', 'block');
        UIHelper.PrepareOverallStatusChart();
        return false;
    },
    ResetOS: function () {
        $("#txtOSfromdate").val('');
        $("#txtOStodate").val('');
        $('#OSlob').prop('selectedIndex', 0);
        UIHelper.PrepareOverallStatusChart();
    },
    ResetLOB: function () {
        $("#txtLOBfromdate").val('');
        $("#txtLOBtodate").val('');
        $('#ddlLOBStatus').prop('selectedIndex', 0);
        UIHelper.PrepareLOBScreen(currentLOB);
    },
    ReloadOS: function () {
        $("#containerBar").css('display', 'none');
        $("#container").css('display', 'block');
        UIHelper.PrepareOverallStatusChart();
    },
    ReloadHC: function () {
        UIHelper.PrepareHourlyChart();
    },
    ExportToExcel: function () {

        //window.open('data:application/vnd.ms-excel,' + encodeURIComponent($('#Ordermaster div.pq-grid-inner div.pq-cont-right div').html()));
        $("#divExport").html("<b><u>" + currentLOB + "</u></b><br><br>" + $('#Ordermaster div.pq-grid-right').html());
        $("#divExport div span:eq(0)").remove();
        $("#divExport div span div.pq-grid-col-resize-handle").remove();
        $("#divExport div span div.pq-grid-header-table-div")[0].innerText = "S. No";
        $("#divExport div span div.pq-grid-header-table-div").css('font-weight', 'bold');
        $("#divExport .pq-row-hidden").remove();
        window.open('data:application/vnd.ms-excel,' + encodeURIComponent($('#divExport').html()));
    },
    ValidateMessage: function (frm) {
        if (frm.txtmessage.value != '' && frm.txtmessage.value != 'Enter Message') {
            UIHelper.InsertMessage(frm.txtmessage.value)
        }
        return false;
    },
    InsertMessage: function (message) {
        $.ajax({
            //url: 'json/tabs.json',
            url: WCFServiceURL + "PostMessage",
            method: 'get',
            dataType: 'json',
            //data: 'tokenId=' + UIHelper.get GetToken() + '&message=' + message,
            data: 'tokenId=' + UIHelper.GetCookie("token") + '&message=' + message,
            success: function (data) {
                if (data.status == "success") {
                    UIHelper.GetMessages();
                }
                else {
                    UIHelper.CheckAuthorization(data.message)
                }
            },
            error: function (err) {
                alert('There is an error occured while inserting message.');
            },
            complete: function () {

            }
        });
    },
    GetMessages: function () {
        $.ajax({
            //url: 'json/messages.json',
            url: WCFServiceURL + "GetMessages",
            method: 'get',
            dataType: 'json',
            data: 'tokenId=' + UIHelper.GetCookie("token"),
            success: function (data) {
                if (data.status == "success") {
                    $("#messageDiv").empty();
                    $.each(data.messages, function () {
                        $("#messageDiv").append("<div class='message'><p>" + this.message + "</p><p><strong>" + this.username + " (" + this.messageDate + ")</strong></p></div>")
                    });
                }
                else {
                    UIHelper.CheckAuthorization(data.message)
                }
            },
            error: function (err) {
                alert('There is an error occured while retreiving messages Tabs.');
            },
            complete: function () {

            }
        });
    },
    BindUserGrid:function(){
            var grid3 = $("#divUsers").pqGrid({ height: 250,width: 570,
                dataModel: UserDataModel,                
                colModel: [

//                            { "dataIndx": "lob", "title": " ", "width": 100,
//                                render: function (ui) {
//                                    var rowData = ui.rowData,
//                                    dataIndx = ui.dataIndx,
//                                    cellData = rowData[dataIndx];
//                                    return "<a href=\"javascript:UIHelper.SaveFilter('" + cellData + "','','Critical Errors','','');UIHelper.LoadTab('" + cellData + "',true);\" title='view complete list of " + cellData + " critical issues'><font color='blue'>" + cellData + "</font></a>";
//                                }
//                            },
                            
					        { "dataIndx": "username", "title": "Username", "width": 150 },					        
					        { "dataIndx": "email", "title": "Email", "width": 150 },
					        { "dataIndx": "isadmin", "title": "Admin", "width": 100 },
					        { "dataIndx": "status", "title": "Status", "width": 150 },
					        
                ],
                title: "",
                resizable: false,
                columnBorders: true,
                editable: false,
                topVisible: false,
                numberCell: false,
                bottomVisible: false,
                rowSelect: function (evt, obj) {
                    //                    $("#ddlLOBStatus").val("Critical Errors");
                    //                    LoadTab(obj.data[obj.rowIndx].lob, true);

                },
                rowDblClick: function(evt,obj){
                   UIHelper.EmptyUserFormControls();   
                   UIHelper.PopulateLOBCheckboxes();
                    var currRow=obj.dataModel.data[obj.rowIndx]
                    $("#Username").val(currRow.username);
                    $("#Password").val(currRow.password);
                    $("#Email").val(currRow.email);
                    $("#UserID").val(currRow.id);                    
                    $("#lblUserStatus").css('display','inline');
                    if(currRow.status=='Active')
                        $("#chkUserStatus").attr('checked',true)
                    else
                        $("#chkUserStatus").removeAttr('checked');
                    $("#chkUserStatus").prop('checked', (currRow.status=='Active')); 
                    debugger;   
                    if(currRow.roles.length>0){                    
                        var matchCheckbox=null;
                        var temp= $.each(currRow.roles, function (i, item) {
                            var temp2=$(".UserAccess").each(function(){
                                    if (item.lobid ==$(this).val())
                                    {
                                        matchCheckbox=this;
                                        return;
                                    }
                            });
                            if(matchCheckbox)
                                $(matchCheckbox).attr('checked',true);
                        });


//                    debugger;

//                                if(item.lobid==$(chkItem).val())
//                                {
//                                    $(chkItem).attr('checked',true);                                
//                                }
//                            });
                       
                    }
                    $("#divUserForm").dialog("open").css('display','inline');
                },
            });          


    },
    BindTabGrid:function(){
            var grid2 = $("#divTabs").pqGrid({ height: 200,width: 560,
                dataModel: TabDataModel,                
                colModel: [

                            { "dataIndx": "id", "title": "ID", "width": 100 },
					        { "dataIndx": "name", "title": "Username", "width": 200 },	       
					        { "dataIndx": "status", "title": "Status", "width": 150 }
					        
                ],
                title: "",
                resizable: false,
                columnBorders: true,
                editable: false,
                topVisible: false,
                numberCell: false,
                bottomVisible: false,
                rowDblClick: function(evt,obj){
                debugger;
                    UIHelper.EmptyTabFormControls();       
                    var currRow=obj.dataModel.data[obj.rowIndx]
                    $("#TabName").val(currRow.name);
                    $("#TabID").val(currRow.id);                    
                    $("#lblTabStatus").css('display','inline');
                    if(currRow.status=='Active')
                        $("#TabStatus").attr('checked',true)
                    else
                        $("#TabStatus").removeAttr('checked');
                    $("#TabStatus").prop('checked', (currRow.status=='Active'));    
                    $("#divTabForm").dialog("open").css('display','inline');
                },
                rowSelect: function (evt, obj) {
                    //                    $("#ddlLOBStatus").val("Critical Errors");
                    //                    LoadTab(obj.data[obj.rowIndx].lob, true);

                }
            });          


    },
     BindNFEmailsGrid:function(){
            var grid5 = $("#divNFEmails").pqGrid({ height: 250,width: 670,
                dataModel: NFEmailsDataModel,                
                colModel: [

                            
					        { "dataIndx": "lob", "title": "Business Object", "width": 150 },	       
					        { "dataIndx": "event", "title": "Event", "width": 150 },
                            { "dataIndx": "emails", "title": "Emails", "width": 350 }
					        
                ],
                title: "",
                resizable: false,
                columnBorders: true,
                editable: false,
                topVisible: false,
                numberCell: false,
                bottomVisible: false,
                rowDblClick: function(evt,obj){
                    UIHelper.EmptyNFFormControls();       
                    var currRow=obj.dataModel.data[obj.rowIndx]
                    debugger;
                    $("#NFLob").val(currRow.lobid);
                    $("#NFID").val(currRow.id);                    
                    $("#Event").val(currRow.event);                    
                    $("#NFEmails").val(currRow.emails);                    
                    $("#divNFEmailForm").dialog("open").css('display','inline');
                },
                rowSelect: function (evt, obj) {
                    //                    $("#ddlLOBStatus").val("Critical Errors");
                    //                    LoadTab(obj.data[obj.rowIndx].lob, true);

                }
            });          


    },
    AdminSetup: function(){  
     var IsAdmin = UIHelper.GetCookie("typ");
        if (IsAdmin && IsAdmin=="true") {
            $("#admDiv").css('display','inline');
            $("#admUL").append("<li class=''><a href='javascript:UIHelper.ShowAdminPopup(AdminSetupEnum.UserManagement);'>User Management</a></li><li class=''><a href='javascript:UIHelper.ShowAdminPopup(2);'>Tab Management (Business Object)</a></li><li class=''><a href='javascript:UIHelper.ShowAdminPopup(AdminSetupEnum.NotificationEmails);'>Emails Notification Setup</a></li>");
        }    
    },
    ShowAdminPopup:function(option){
        UIHelper.HideAdminPanelDivs();
        switch(option)
        {
            case AdminSetupEnum.UserManagement:
                $("#divUserPanel").dialog({
                    height: 500,
                    width: 600,
                    modal: true
                }).css('display','inline');  
                UIHelper.BindUserGrid();
                break;
            case AdminSetupEnum.TabManagement:
                $("#divTabPanel").dialog({
                    height: 400,
                    width: 590,
                    modal: true
                }).css('display','inline'); ;  
                UIHelper.BindTabGrid();
                break;
            case AdminSetupEnum.NotificationEmails:
                $("#divEmailsPanel").dialog({
                    height: 550,
                    width: 700,
                    modal: true
                }).css('display','inline');  
                UIHelper.BindNFEmailsGrid();
                break;

        }
         
    },
    HideAdminPanelDivs:function(){
       $("#divEmailsPanel").css('display','none');   
       $("#divUserPanel").css('display','none');
       $("#divTabPanel").css('display','none');
    
    },
    LoadEmails:function(){
        $.ajax({
            //url: 'json/emails.json',
            url: WCFServiceURL + "GetEmails",
            method: 'get',
            dataType: 'json',
            data: 'tokenId=' + UIHelper.GetCookie("token"),
            success: function (data) {
                if (data.status == "success") {                    
                    $("#txtemails").val(data.emails);
                }
                else {
                    UIHelper.CheckAuthorization(data.message)
                }
            },
            error: function (err) {
                alert('There is an error occured while retreiving notification emails.');
            },
            complete: function () {

            }
        });
    },
    SaveEmails:function(){
        $.ajax({
            //url: 'json/saveemails.json',
            url: WCFServiceURL + "SaveEmail",
            method: 'get',
            dataType: 'json',
            data: 'tokenId=' + UIHelper.GetCookie("token"),
            success: function (data) {
                if (data.status == "success") {                    
                    alert('Notification emails have been updated successfully.');
                    UIHelper.HidePopup(AdminSetupEnum.NotificationEmails);
                }
                else {
                    UIHelper.CheckAuthorization(data.message)
                }
            },
            error: function (err) {
                alert('There is an error occured while saving notification emails.');
            },
            complete: function () {

            }
        });
    },
    HidePopup:function(option){
        switch(option)
        {
            case AdminSetupEnum.UserManagement:
                $("#divUserPanel").dialog("close");
                break;
            case AdminSetupEnum.TabManagement:
                $("#divTabPanel").dialog("close");
                break;
            case AdminSetupEnum.NotificationEmails:
                $("#divEmailsPanel").dialog("close");
                break;
        }         
    },
    EmptyTabFormControls: function(){
        $("#TabName").val('');
        $("#TabID").val('');                    
    },
    EmptyNFFormControls:function(){
        $("#NFLID").val('');
        $("#NFLob").val('');
        $("#Event").val('');  
        $("#NFEmails").val('');
    },
    EmptyUserFormControls:function(){
        $("#Username").val('');
        $("#Password").val('');
        $("#Email").val('');
    },
    PopulateLOBCheckboxes:function(){
         $("#ulLOB").empty();
         var temp= $.each(Tabs, function (i, item) {
            $("#ulLOB").append("<li><input type='checkbox' id='chkUserAccess' class='UserAccess' value=" + item.id + " />" + item.name + "</li>");
         });
    },
    PopulateSMLobDropdown:function(){
        $("#SMLob").empty();
        var temp= $.each(Tabs, function (i, item) {
            $("#SMLob").append("<option value='" + item.id + "'>" + item.name + "</option>");
         });
    },
    PopulateStates:function(){
        $.ajax({
            //url: 'json/statemachine.json',
            url: WCFServiceURL + "GetStateMachine",
            method: 'get',
            dataType: 'json',
            data: 'tokenId=' + UIHelper.GetCookie("token"),
            success: function (data) {
                if (data.status == "success") {                    
                     $("#tblStates").empty();
                     $("#tblStates").append("<tr><td colspan='2' align='left' style='padding-left:20px;' height=30><b>Business Object: " + data.lob + ", ID: " + data.id + ", Time Consumed: " + data.time + "</b></td></tr>");
                     $.each(data.states, function (i, item) {
                        if(i>0)
                            $("#tblStates").append("<tr><td align='right' style='padding-right:10px;'><img src='images/arrow_down.png' width=30 height=20></td><td>&nbsp;</td></tr>");
                        if(item.currstate=="1")
                            $("#tblStates").append("<tr><td align='right' style='padding-right:10px;height:40px;' width='35%'><div class='circleGreen'></div></td><td align='left'>" + item.state + " (Current State)</td></tr>");
                        else
                            $("#tblStates").append("<tr><td align='right' style='padding-right:10px;height:40px;'><div class='circleBlue'></div></td><td align='left'>" + item.state + "</td></tr>");
                        
                     });
                }
                else {
                    UIHelper.CheckAuthorization(data.message)
                }
            },
            error: function (err) {
                alert('There is an error occured while getting states.');
            },
            complete: function () {

            }
        });
    },
    GetCheckedLOBs:function(){
    debugger;
        var selectedLobs
        selectedLobs='';
        var temp2=$(".UserAccess:checked").each(function(){
            selectedLobs+= $(this).val() + ",";            
        });
        if(selectedLobs!='')
        {
            selectedLobs=selectedLobs.substr(0,selectedLobs.length-1);   
        }
        //alert(selectedLobs);
        return selectedLobs;
    }
}